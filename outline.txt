Why PHP7?
  It's faster
  It's better
  Apparently people really like return type declarations and scalar types
  (Zeev covered all of this)

The problem
  We all have PHP5 code bases
  PHP 5.6 is EOL on August 28, 2017 (ono)
  PHP 7.0 is being released in November (hopefully)
  21 month changeover period
  WHAT DO

DON'T PANIC
  Worst option: distros will probably support PHP5 for a while longer
  Less worse option: do a one way, flag day migration
  Better option: run on both for a while!

Let's undermine the entire premise of this presentation
  Lorna's tweet

Methods
  If you don't have regression tests, start writing: it's the single best tool in your armory
  Just running code in PHP7 (in your development environment only!) will probably give you some useful errors and warnings, but be aware of the exception/error handling changes (more on that later)
  It's likely that tools will appear in the next few months to ease migration (I know because I'm writing one); stay on top of those

If you maintain one or more libraries/frameworks
  Consider your support policy
  I would strongly suggest supporting both for a reasonable period (and test on both!)
  Even if a 5to7 appears, Python experience suggests that's the real solution (and it's much easier than Python 2/3)
  "Reasonable period" probably means 2-3 years; at some point you'll want that PHP7 goodness
  Whatever you do: TELL YOUR USERS

If you use libraries and/or frameworks (so all of you)
  Pay attention for when they tell you what the support policy will be
  You don't want to end up hacking in your own fixes in the long term (but obviously submit PRs when possible)

Breaks (and fixes)
  Variable handling
    This is the big one: it's quiet and insidious (if mercifully rare)
    Indirect references have different semantics
    Have to use curly braces to specify behaviour
    How to detect?
      With a reasonable CS, grep isn't unreasonable, but hitting every variation will be tough (this doesn't handle non-ASCII characters or array keys with spaces):
        git grep -E '((((::)|(->))\$[a-zA-Z_][a-zA-Z0-9_]*)+\[[^\s]+\]\())|(->\$[a-zA-Z_][a-zA-Z0-9_]*\[)|(\$\$[a-zA-Z_][a-zA-Z0-9_]*\[)'
      IDEs will probably integrate support at some point (hopefully)
      Would be surprised if tooling doesn't appear at some point to detect this
    How to fix
      Curly braces
      If you're going to run a 5/7 code base, I might prefer breaking them down into separate expressions even though the braces would work

  Engine exceptions
    (some of this is still in flux)
    Many previously fatal (whether recoverable or not) errors have been converted to exceptions
    These exceptions are not contained within the Exception hierarchy, so existing catch (Exception $e) { ... } blocks are unaffected
    What this means is that if you don't already have a last resort exception handler with set_exception_handler(), you really really want one (and probably have it doing the same things as set_error_handler())
    You can no longer assume that set_exception_handler() callables will only get Exception objects; they may be BaseException/Throwable and not userland exceptions

  foreach by-reference is better when modifying the array in place
    (but different)
    This one's hard to detect; it's mostly going to be looking for by-reference foreach loops and then seeing if elements can be added or removed within the loop
    Suggested fix: switch by-reference foreach loops to array_map or array_walk whenever possible, and refactor if you have to manipulate in place

  foreach no longer uses the internal array pointer
    Means that current()/next() etc no longer "work" the same way in PHP7
    Audit uses of current(), next(), prev(), end(), reset(), key(), pos()
    If within foreach loops on the same array, refactor

  Strings containing hex values aren't parsed as numbers any more
    The simple case is probably easy enough to detect
      git grep '["\']0x'
    You'll get a notice in some cases, but that doesn't help with comparisons
    Testing is probably your best weapon here

  list() will fail silently if a string is given to it
    Elements will be null
    Check list() assignments if you think this is likely to be a problem
    Workaround: list($a, $b, $c) = str_split($str);

  yield is now right-associative and has changed precedence
    yield $foo or die is now (yield $foo) or die
    Audit yield statements (most code bases probably don't have many!)
    Use parentheses

  Sorting algorithm changed
    PHP has never specified stability of the sort
    Still not guaranteed
    Equal items may now be in different orders
    Most likely to show up in overly specific test cases

  Finally, make sure you set date.timezone

Breaks that cause errors, but you should be aware of
  Additional reserved class, interface and trait names
    bool, int, float, string, null, false, true, resource, object, mixed, numeric
    I'd probably stay away from "scalar" and "void", too

  global expressions
    Anything other than a basic variable after global is no longer supported
    Why the hell were you using this anyway?
    This will error out.

  mysql
    oh god why
    No, really
    oh god why
    Easy enough to detect: git grep '\<mysql_'
    There are compatibility shims (don't use them)
    Migrate to mysqli or PDO_mysql — it's time

  $HTTP_RAW_POST_DATA is gone (so expect undefined variable warnings)
    php://input is your friend

When should I start doing this?
  Yesterday (but not in production!)
  Rasmus has released a Vagrant php7 image
  If you can build PHP5, you can build PHP7
  Expect to see packages once alpha releases start
  If you have a CI setup, have a build slave use PHP7
